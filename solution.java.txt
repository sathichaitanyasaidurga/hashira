function baseToBigInt(value, base) {
  const digits = value.toLowerCase().split('');
  const digitMap = {
    '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5,
    '6': 6, '7': 7, '8': 8, '9': 9,
    'a': 10, 'b': 11, 'c': 12, 'd': 13, 'e': 14, 'f': 15,
  };

  let result = 0n;
  const bigBase = BigInt(base);

  for (const digit of digits) {
    const val = digitMap[digit];
    
    result = result * bigBase + BigInt(val);
  }

  return result;
}

function findConstantTerm(data) {
  const k = data.keys.k;
  const m = k - 1;

  // Filter keys to get root keys only, sorted numerically
  const rootKeys = Object.keys(data)
    .filter(key => key !== "keys")
    .map(Number)
    .sort((a, b) => a - b)
    .slice(0, m);  // first m roots

  // Convert roots to BigInt
  const roots = rootKeys.map(key => {
    const root = data[key.toString()];
    return baseToBigInt(root.value, parseInt(root.base, 10));
  });

  // Multiply all roots
  let product = 1n;
  for (const root of roots) {
    product *= root;
  }

  // Calculate constant term: (-1)^m * product of roots
  const sign = (m % 2 === 0) ? 1n : -1n;
  const constantTerm = sign * product;

  return constantTerm.toString();
}

// Test case 1 (small)
const data1 = {
  keys: { n: 4, k: 3 },
  "1": { base: "10", value: "4" },
  "2": { base: "2", value: "111" },
  "3": { base: "10", value: "12" },
  "6": { base: "4", value: "213" }
};

// Test case 2 (large)
const data2 = {
  keys: { n: 10, k: 7 },
  "1": { base: "6", value: "13444211440455345511" },
  "2": { base: "15", value: "aed7015a346d635" },
  "3": { base: "15", value: "6aeeb69631c227c" },
  "4": { base: "16", value: "e1b5e05623d881f" },
  "5": { base: "8", value: "316034514573652620673" },
  "6": { base: "3", value: "2122212201122002221120200210011020220200" },
  "7": { base: "3", value: "20120221122211000100210021102001201112121" },
  "8": { base: "6", value: "20220554335330240002224253" },
  "9": { base: "12", value: "45153788322a1255483" },
  "10": { base: "7", value: "1101613130313526312514143" }
};

console.log("Test case 1 constant:", findConstantTerm(data1)); // Expect: 28
console.log("Test case 2 constant:", findConstantTerm(data2));
